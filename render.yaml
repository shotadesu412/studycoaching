services:
  # 1. Web Service (Flask/Gunicorn)
  - type: web
    name: study-support-app
    runtime: python
    buildFilter:
      paths:
        - "app.py"
        - "requirements.txt"
    buildCommand: "pip install -r requirements.txt"
    startCommand: "gunicorn app:app"
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.0
      - key: OPENAI_API_KEY
        sync: false # Renderのダッシュボードで設定
      - key: MONITORING_TOKEN
        generateValue: true # 自動でトークンを生成
      - key: REDIS_URL
        fromService:
          type: redis
          name: redis-broker
          property: connectionString
    disks:
      - name: sqlite-disk
        mountPath: /var/data/render
        sizeGB: 1
    healthCheckPath: /health

  # 2. Background Worker (Celery)
  - type: worker
    name: celery-worker
    runtime: python
    buildFilter:
      paths:
        - "app.py"
        - "celery_worker.py"
        - "requirements.txt"
    buildCommand: "pip install -r requirements.txt"
    startCommand: "celery -A app.celery worker --loglevel=info"
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.0
      - key: OPENAI_API_KEY
        fromService:
          type: web
          name: study-support-app
          envVarKey: OPENAI_API_KEY
      - key: MONITORING_TOKEN
        fromService:
          type: web
          name: study-support-app
          envVarKey: MONITORING_TOKEN
      - key: REDIS_URL
        fromService:
          type: redis
          name: redis-broker
          property: connectionString
    disks:
      - name: sqlite-disk # Webサービスと同じディスクをマウント
        mountPath: /var/data/render

  # 3. Redis Instance (Celery Broker)
  - type: redis
    name: redis-broker
    ipAllowList: [] # 内部接続のみ許可
    maxmemoryPolicy: allkeys-lru